#include <iostream>
#include "GTree.h"

using namespace std;
using namespace WLib;

int main()
{
    GTree<int> tree;
    
    // 构建测试树
    TreeNode<int>* root = tree.insert(1, nullptr);   // 根节点
    TreeNode<int>* child1 = tree.insert(2, root);    // 子节点1
    TreeNode<int>* child2 = tree.insert(3, root);    // 子节点2
    TreeNode<int>* grandchild1 = tree.insert(4, child1); // 孙子节点1
    TreeNode<int>* grandchild2 = tree.insert(5, child1); // 孙子节点2
    
    cout << "Original tree node count: " << tree.count() << endl;
    
    // 测试 remove(const T& value) 函数 - 删除值为2的节点
    SharedPointer<Tree<int>> removedTree1 = tree.remove(2);
    // if(removedTree1   != nullptr )
    {
        cout << "Node with value 2 removed successfully" << endl;
        cout << "Removed subtree node count: " << removedTree1->count() << endl;
        cout << "Remaining tree node count: " << tree.count() << endl;
    }
    
    // 重新构建树以继续测试
    tree.clear();
    root = tree.insert(1, nullptr);
    child1 = tree.insert(2, root);
    child2 = tree.insert(3, root);
    TreeNode<int>* child3 = tree.insert(6, root);
    grandchild1 = tree.insert(4, child1);
    grandchild2 = tree.insert(5, child1);
    
    cout << "\nRebuilt tree node count: " << tree.count() << endl;
    
    // 测试 remove(TreeNode<T>* node) 函数 - 通过节点引用删除
    SharedPointer<Tree<int>> removedTree2 = tree.remove(child2);
    // if(removedTree2 != NULL)
    {
        cout << "Node with value " << child2->value << " removed successfully by reference" << endl;
        cout << "Removed subtree node count: " << removedTree2->count() << endl;
        cout << "Remaining tree node count: " << tree.count() << endl;
    }
    
    // 遍历剩余树节点
    cout << "Remaining tree nodes: ";
    tree.begin();
    while(!tree.end())
    {
        cout << tree.current() << " ";
        tree.next();
    }
    cout << endl;
    
    return 0;
}